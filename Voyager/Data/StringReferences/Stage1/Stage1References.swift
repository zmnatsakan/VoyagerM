//
//  Stage1Preview.swift
//  Voyager
//
//  Created by admin on 28.11.2023.
//

import Foundation

struct Stage1PreviewReference: PhraseDelegate {
    
    static let shared = Stage1PreviewReference()
    private init() {}
    
    private let text0 = PhraseData(
        text: "Голова соображает так плохо, что ты с трудом отличаешь туман в глазах от тумана поверх мокрой улицы. У тебя в карманах слегка помятые документы с твоими фото и именем, которое ни о чём не говорит и никак не кажется своим. Нет ни телефона, ни денег, ни ключей от какой-либо двери. Тебя мучает жажда и голод. Хочешь жить – умей вертеться, даже если вместо вращений у тебя лишь ходьба по асфальту навстречу судьбе.",
        type: .common
    )
    
    
    var phrases: [PhraseData] {
        return [text0]
    }
}

struct Stage1ThimblesReference: PhraseDelegate {
    static let shared = Stage1ThimblesReference()
    private init() {}
    
    private let text0 = PhraseData(
        text: "Если всё потеряно, а выживать как-то нужно, остаётся последнее средство – пойти на преступление. Только вот у тебя в карманах нет никакого оружия, без которого ты не знаешь, как можно забрать чужое. Остаются два варианта, и неясно, что из них хуже: просить милостыню, или… пойти на риск.",
        type: .common
    )
    
    private let text1 = PhraseData(
        text: """
    Так ты думал, глядя на ловкача-напёрсточника прямо у подворотни. Он умело собирал одях вокруг себя, завораживая их быстрыми движениями рук, что стремились запутать всех окружающих с целью наживы.
    Говорил он совершенно обычно, но неустанно: “Кручу-верчу, запутать хочу!”.
    """,
        type: .common
    )
    
    private let text2 = PhraseData(
        text: "- Эй, ты, хочешь попробовать?",
        type: .thimblesMan
    )
    
    private let text3 = PhraseData(
        text: "- Не особо, мне играть совсем не на что.",
        type: .mc
    )
    
    private let text4 = PhraseData(
        text: "- Да ну, все так говорят, а ты начни с монетки, а дальше пойдёт-поедет…",
        type: .thimblesMan
    )
    
    private let text5 = PhraseData(
        text: "- Ты не понял? У меня пустые карманы. Лучше бы я продал твои напёрстки и купил на них хлеба, но я слишком слаб, чтобы отобрать у тебя что-то силой…",
        type: .mc
    )
    
    private let text6 = PhraseData(
        text: "- Ну-ка, ну-ка, угрожает он! Драться вздумал – бог накажет! Вон, я вижу, у тебя огромный серебрянный крест на цепочке, давай ставь его, раз тебе играть больше не на что.",
        type: .thimblesMan,
        answerPositive: "Поставить крест",
        answerNegative: "Не ставить крест",
        hasAnswers: true
    )
    
    private let text7 = PhraseData(
        text: "",
        type: .thimblesMan,
        answerPositive: "- Да, я вижу, ты настроен серьёзно. Но теперь мы сыграем как следует, на сумму по-больше!",
        answerNegative: "- Тут ты прав, есть вещи, что важнее любого азарта. У каждого есть то, что в прямом смысле свято. Вижу, ты всё правильно думаешь, так что я, так и быть, дам тебе сыграть один раз бесплатно!",
        hasAnswers: true
    )
    
    var phrases: [PhraseData] {
        return [text0, text1, text2, text3, text4, text5, text6, text7]
    }
}

struct Stage1LotteryReference: PhraseDelegate {
    
    static let shared = Stage1LotteryReference()
    private init() {}
    
    private let text0 = PhraseData(
        text: "Ты освоился так здорово, что не заметил, как за окружающей пьяню начали стягиваться машины из вытрезвителя, вместе с полицейским сопровождением. Полицейские быстро поняли, чего ради тут все собираются, так что твой друг-напёрсточник побросал всё, что можно, и пустился в бега при виде погон. Оставаться здесь было опасно, от таких облав не спасёт и твой крест размером со столб.",
        type: .common
    )
    
    private let text1 = PhraseData(
        text: "Так ты думал, сторонясь алконавтов и двигаясь в сторону обычных прохожих, неподозрительных и непримечательных.",
        type: .common
    )
    
    private let text2 = PhraseData(
        text: "У тебя на руках теперь было немного денег, самое время подкрепиться, раз уж спешить сейчас некуда. В ресторан ты вряд ли войдёшь в таком виде, а вот подойти к ларьку рядом с рюмочной или к привокзальной пекарне – самое то. Шаурма, пирог, ватрушка, чай – еда мучная, выручай!",
        type: .common
    )
    
    private let text3 = PhraseData(
        text: "В союзе печати неподалёку виднеются огромные марки, распечатанные листами. При ближайшем рассмотрении оказывается, что это лотерейные билеты. Билет стоит всего червонец. Выглядит ярко, бликует и манит. Раз уж повезло с шулером из подворотни, может, и тут шансы есть?",
        type: .common
    )
    
    
    var phrases: [PhraseData] {
        return [text0, text1, text2, text3]
    }
}

struct Stage1RPSReference: PhraseDelegate {
    
    static let shared = Stage1RPSReference()
    private init() {}
    
    private let text0 = PhraseData(
        text: "Проходя мимо небольших магазинчиков с едой и лимонадами ты заметил группу подростков, которые бьют кулаками перед собой по невидимому столу. Позже стало ясно, что они разыгрываются на камень-ножницы-бумага, вот только для чего им это понадобилось?",
        type: .common
    )
    
    private let text1 = PhraseData(
        text: "- Дядь, а дядь,.. - обратился один из них.",
        type: .exFellowStudent
    )
    
    private let text2 = PhraseData(
        text: "- Да, чего?",
        type: .mc
    )
    
    private let text3 = PhraseData(
        text: "- Мы студенты первокурсники, вот нам стипендию выдали, мы решили взять по пиву, но продавать нам никто не станет, потому что мы на год младше нужного возраста, ведь все пошли  в школу с 6ти лет. Посветить паспортом не получится, может быть, вы возьмёте нам по банке питья? За труды мы накинем немного сверху.",
        type: .exFellowStudent
    )
    
    private let text4 = PhraseData(
        text: "- Без проблем, ребят, только предлагаю другой вариант. Я тут видел, вы разыгрывались на КМН. Мы можем сыграть с любым из вас на червонцы или полтинники, в этих пределах. Баночки я вам куплю и так, бесплатно, попробуйте на остаток суммы лучше сыграть и выиграть себе ещё на закусь, допустим. Если проиграете, потеря не велика, вы всё равно хотели мне эти деньги отдать. Ну, что скажете?",
        type: .mc
    )
    
    private let text5 = PhraseData(
        text: "- Да, дядь, вам только в казино и работать, разводить на рулетку. Ну давайте, раз уж мы ничего не теряем, только отойдём в сторонку и отопьём понемногу сперва, хорошо?",
        type: .exFellowStudent
    )
    
    private let text6 = PhraseData(
        text: "- Без проблем, погнали.",
        type: .mc
    )
    
    var phrases: [PhraseData] {
        return [text0, text1, text2, text3, text4, text5, text6]
    }
}

struct Stage1StrangerArgumentReference: PhraseDelegate {
    
    static let shared = Stage1StrangerArgumentReference()
    private init() {}
    
    private let text0 = PhraseData(
        text: "Шла игра, веселье шло – всем там было хорошо. Так могли сидеть весь вечер, но ты кем-то был замечен.",
        type: .common
    )
    
    private let text1 = PhraseData(
        text: "- Извините, а что это у вас тут, собственно говоря, происходит? Мужчина, вы чего к молодым пристаёте? Навязали им какие-то игры полублатные – вы чему это учите молодёжь?",
        type: .casinoPartner
    )
    
    private let text2 = PhraseData(
        text: "- Я учу их полагаться на шанс лишь тогда, когда это часть досуга и отдыха. Я не обещал им, что они здесь накопят на АААВТОМОБИИИЛЬ. И вообще, вам то какое дело и что это за расспросы?",
        type: .mc
    )
    
    private let text3 = PhraseData(
        text: "- А такое, что я их преподаватель из университета. Эти оборванцы так “внимательно” посещали мои занятия, что даже не успели запомнить, каков я на внешний вид. Сомневаюсь, что они дотянут до сессии, раз у них вместо уравнений пивное веселье по вечерам.",
        type: .casinoPartner
    )
    
    private let text4 = PhraseData(
        text: "- Не согласен. Нужно уметь работать, это бесспорно, но нужно уметь и отдыхать, иначе сил на работу не будет. Предлагаю вот что: мы сейчас заканчиваем нашу азартную встречу, всех расходятся восвояси, но позже мы с вами посмотрим, как ребята справятся с сессией. Если у них вновь всё будет ровно, как и до этого, я выигрываю спор, если не зачтутся – вы выигрываете. Проверим, кто прав. В случае победы я получаю от вас шпаргалку по теории вероятности, чтобы ставки всякие делать и выигрывать. В случае поражения я больше не подойду к студентам с любыми азартными играми. Вы согласны?",
        type: .mc
    )
    
    private let text5 = PhraseData(
        text: "- Согласен, конечно, надо же это как-то прекращать. А шпаргалок у меня вагон, с этим проблем не будет.",
        type: .casinoPartner
    )
    
    var phrases: [PhraseData] {
        return [text0, text1, text2, text3, text4, text5]
    }
}
